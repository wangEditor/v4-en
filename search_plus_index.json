{"./":{"url":"./","title":"Introduction","keywords":"","body":"WangEditor wangEditor A lightweight rich text editor, friendly API and use extremely conventient. Offical website · Explore the docs » Chinese Docs · View Demo · Report Bug · Request Feature About The Project wangEditor is a web rich text editor that use typescript develop. It's lightweight, simple, use convience and open source. It support most of modern browsers: Chrome, Firefox, Safar, Edge, QQ, IE11 and so on. It doesn't support mobile browers. Usage Use NPM Package npm install wangeditor --save A few lines code for creating editor instance： import E from \"wangeditor\"; const editor = new E(\"#div1\"); editor.create(); Use CDN const E = window.wangEditor const editor = new E('#div1') // or const editor = new E(document.getElementById('div1')) editor.create() Contributing Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are greatly appreciated. Before contributing wangEditor, You must read contribution docs. License Distributed under the MIT License. See MIT License for more information. Contact Wangfupeng - wangfupeng1988@163.com Project Link: https://github.com/wangeditor-team/wangEditor Developer Team We have a professional developer team, if you want to join us, you can send email to wangfupeng1988@163.com. If you are a chinese developer, you can join our QQ group or read chinese docs for more information. Support Us Your support will encourage us to output more quality content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/01-get started/":{"url":"pages/01-get started/","title":"Get Started","keywords":"","body":"Get Started Please refer to subdirectory. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/01-get started/01-basic usage.html":{"url":"pages/01-get started/01-basic usage.html","title":"Basic Usage","keywords":"","body":"Basic Usage CDN weblcome use wangEditor richEditor const E = window.wangEditor const editor = new E('#div1') // or const editor = new E( document.getElementById('div1') ) editor.create() Npm import E from 'wangeditor' const editor = new E('#div1') // or const editor = new E( document.getElementById('div1') ) editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/01-get started/02-edit height.html":{"url":"pages/01-get started/02-edit height.html","title":"Edit Height","keywords":"","body":"Editable Area Height You can use editor.config.height property to change editable area height in wangEditor. By default, the editable area height is 300px. const editor = new E('#div1') // set editing area height to 500px editor.config.height = 500 // notice，you sholud set height before using create() editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/01-get started/03-split toolbar and textarea.html":{"url":"pages/01-get started/03-split toolbar and textarea.html","title":"Split Toolbar And Textarea","keywords":"","body":"Split Toolbar and Editable Area Toolbar and editable area allows to separated in wangEditor. Because Toolbar and editable area is controlled element in wangEditor, you can customize styles such as fixed toolbar、auto add editing area height and so on. .toolbar { border: 1px solid #ccc; } .text { border: 1px solid #ccc; min-height: 400px; } container and toolbar split ------ split line ------ const E = window.wangEditor const editor = new E('#toolbar-container', '#text-container') // transfer two element editor.create() From upper code , you can knows that toolbar and editable area is two div , that means you can set any style you want. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/01-get started/04-textarea.html":{"url":"pages/01-get started/04-textarea.html","title":"Textarea","keywords":"","body":"Use Textarea We can not directly submit rich text in textarea . Instead, you should use editor.config.onchange to update textarea content: webcomle use wangEditor rich text editor const E = window.wangEditor const editor = new E('#div1') const $text1 = $('#text1') editor.config.onchange = function (html) { // step two，observe change, sync update to textarea $text1.val(html) } editor.create() // frist，init textarea value $text1.val(editor.txt.html()) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/01-get started/05-Multiple Editor Instances.html":{"url":"pages/01-get started/05-Multiple Editor Instances.html","title":"Multiple Editor Instances","keywords":"","body":"Multiple Editor Instances WangEditor can create multiple editor instance in the same page. .toolbar { background-color: #f1f1f1; border: 1px solid #ccc; } .text { border: 1px solid #ccc; height: 200px; } split section first demo（menus and editable area split） second demo（noraml） const E = window.wangEditor const editor1 = new E('#div1', '#div2') editor1.create() const editor2 = new E('#div3') editor2.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/01-get started/06-Zindex.html":{"url":"pages/01-get started/06-Zindex.html","title":"Zindex","keywords":"","body":"ZIndex You can use editor.config.zIndex to change editor z-index . By default, the editor z-index is 1000. const editor = new E('#div1') editor.config.zIndex = 500 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/01-get started/07-placeholder.html":{"url":"pages/01-get started/07-placeholder.html","title":"Placeholder","keywords":"","body":"Placeholder You can use editor.config.placeholder to change placeholder text. const editor = new E('#div1') editor.config.placeholder = 'custom placeholder txt' // editor.config.placeholder = '' // if you not use placeholder, you can get placehoder a empty string editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/01-get started/08-auto focus.html":{"url":"pages/01-get started/08-auto focus.html","title":"Auto Focus","keywords":"","body":"Auto Focus By default, the editable area will be focused when initializing. If you want to cancel auto focus that using editor.config.focus. You can use editor.config.focus to cancel auto focus. For example: const editor = new E('#div1') // cancel auto focus editor.config.focus = false editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/01-get started/09-custom alert.html":{"url":"pages/01-get started/09-custom alert.html","title":"Custom Alert","keywords":"","body":"Custom Alert When you want customize alert that use editor.config.customAlert . By default, wangEditor will be invoking window.alert. You can easy to customize alert style: import { message } from 'antd'; const editor = new E('#div1') // take Ant Design as an example editor.config.customAlert = function (s, t) { switch (t) { case 'success': message.success(s) break case 'info': message.info(s) break case 'warning': message.warning(s) break case 'error': message.error(s)cus break default: message.info(s) break } } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/02-deal content/":{"url":"pages/02-deal content/","title":"Deal Content","keywords":"","body":"yyy Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/02-deal content/01-setContent.html":{"url":"pages/02-deal content/01-setContent.html","title":"SetContent","keywords":"","body":"Set Content If conditions allow, you best to use first way in follow several ways. Use HTML You can set innerHTML content which you want to init in div for creating editor. inital content inital content const E = window.wangEditor const editor = new E('#div1') editor.create() Use JS And you can use editor.txt.html(...) to set editor content after creating editor. const E = window.wangEditor const editor = new E('#div1') editor.create() editor.txt.html('set conetnt by JS API') // set content Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/02-deal content/02-appendContent.html":{"url":"pages/02-deal content/02-appendContent.html","title":"AppendContent","keywords":"","body":"Append Content After creating editor, you can use editor.txt.append('content') to append content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/02-deal content/03-getHTML.html":{"url":"pages/02-deal content/03-getHTML.html","title":"GetHTML","keywords":"","body":"Get HTML Content The editor.txt.html() is used to get HTML content. Note the html which get from editor doesn't contains any style.it means that you can implement changing theme function by yourself.if you want to custom the styles for tags such as , , and so on, The editor styles are provided below for your reference： /* table styles */ table { border-top: 1px solid #ccc; border-left: 1px solid #ccc; } table td, table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; padding: 3px 5px; } table th { border-bottom: 2px solid #ccc; text-align: center; } /* blockquote styles */ blockquote { display: block; border-left: 8px solid #d0e5f2; padding: 5px 10px; margin: 10px 0; line-height: 1.4; font-size: 100%; background-color: #f1f1f1; } /* code styles */ code { display: inline-block; *display: inline; *zoom: 1; background-color: #f1f1f1; border-radius: 3px; padding: 3px 5px; margin: 0 3px; } pre code { display: block; } /* ul ol styles */ ul, ol { margin: 10px 0 10px 20px; } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/02-deal content/04-getText.html":{"url":"pages/02-deal content/04-getText.html","title":"GetText","keywords":"","body":"Get Text Content The editor.txt.text() is used to get text content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/02-deal content/05-getJSON.html":{"url":"pages/02-deal content/05-getJSON.html","title":"GetJSON","keywords":"","body":"Get Or Set JSON Data Get JSON You can use editor.txt.getJSON() to get JSON content, the format as follows: [ { \"tag\": \"p\", \"attrs\": [], \"children\": [ \"welcome to use \", { \"tag\": \"b\", \"attrs\": [], \"children\": [ \"wangEditor\" ] }, \"rich text editor\" ] }, { \"tag\": \"p\", \"attrs\": [], \"children\": [ { \"tag\": \"img\", \"attrs\": [ { \"name\": \"src\", \"value\": \"xxx.png\" }, { \"name\": \"style\", \"value\": \"max-width:100%;\" } ] } ] } ] Set JSON You can also use editor.txt.setJSON(json) API to set JSON content, the json param format must be consistent with mentioned above. Note setJSON API is supported started with v4.3.0. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/02-deal content/06-clear.html":{"url":"pages/02-deal content/06-clear.html","title":"Clear","keywords":"","body":"Clear Content The editor.txt.clear() is used to clear editor content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/02-deal content/07-history.html":{"url":"pages/02-deal content/07-history.html","title":"History","keywords":"","body":"History Setting There are two ways to set History mode: standard mode(for modern browsers) and compatible mode (for IE and old Edge).You can set history mode by editor.config.compatibleMode. And about the max size of History, you can set it by editor.config.historyMaxSize. The following shows how to use them. The editor.config.onchangeTimeout can be used to set the delay time of History records (when users are not active after x millisecond) on compatible mode. const E = window.wangEditor const editor = new E(\"#div1\") // by default，IE and old Edge use compatible mode，if you want to set the mode for other browsers, you can set a function. editor.config.compatibleMode = function () { // return true for compatible mode, otherwise return false for standard mode. return true } // when we use compatible mode, we can set recording time by onchangeTimeout，the default value is 200 ms. editor.config.onchangeTimeout = 500 // change to 500 ms // you aslo can set max size for history, the default value is 30. editor.config.historyMaxSize = 50 // change to 50 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/03-menu/":{"url":"pages/03-menu/","title":"Menu","keywords":"","body":"Menu Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/03-menu/01-setMenus.html":{"url":"pages/03-menu/01-setMenus.html","title":"SetMenus","keywords":"","body":"Set Menus You should set menus before creating editor. editor.config.menus The option is defined for menus which are visible and menus order. For example: welcome to use wangEditor editor const E = window.wangEditor const editor = new E('#div1') // set menus, change order editor.config.menus = [ 'bold', 'head', 'link', 'italic', 'underline' ] editor.create() editor.config.excludeMenus The option is defined for menus are excluded. For example: welcome to use wangEditor editor const E = window.wangEditor const editor = new E('#div1') // set exclude menus editor.config.excludeMenus = [ 'emoticon', 'video' ] editor.create() Note in order to avoid conflict, don't both set menus and excludeMenus. All Menus By default, editor show all menus, there are as follows: editor.config.menus = [ 'head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'indent', 'lineHeight', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'video', 'table', 'code', 'splitLine', 'undo', 'redo', 'todo', ] Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/03-menu/02-setColors.html":{"url":"pages/03-menu/02-setColors.html","title":"SetColors","keywords":"","body":"Set Colors You can set font color and background color to use editor.config.colors: const E = window.wangEditor const editor = new E('#div1') // set color and background color editor.config.colors = [ '#000000', '#eeece0', '#1c487f', '#4d80bf' ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/03-menu/03-setFontFamily.html":{"url":"pages/03-menu/03-setFontFamily.html","title":"SetFontFamily","keywords":"","body":"Set Font Size You can set font family to use editor.config.fontNames: const E = window.wangEditor const editor = new E('#div1') editor.config.fontNames = [ 'Arial' 'Tahoma', 'Verdana', 'Times New Roman', 'Courier New', ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/03-menu/04-setFontSize.html":{"url":"pages/03-menu/04-setFontSize.html","title":"SetFontSize","keywords":"","body":"Set Font Size You can set font size to use editor.config.fontSizes: const E = window.wangEditor const editor = new E('#div1') editor.config.fontSizes = { 'x-small': { name: '10px', value: '1' }, 'small': { name: '13px', value: '2' }, 'normal': { name: '16px', value: '3' }, 'large': { name: '18px', value: '4' }, 'x-large': { name: '24px', value: '5' }, 'xx-large': { name: '32px', value: '6' }, 'xxx-large': { name: '48px', value: '7' }, } editor.create() Note especially in above example: key value that x-small, small, normal can't change, the key value only can decrease. value is '1 - 7' can't change too, it only can decrease. And the key must be correspond with value.Such as, small is correspond with 2. So in above example, you can change name. It will not work immediately after the modification, and some adjustments need to be made. Taking 'large': { name: '18px', value: '4' } as an example, when you set the font size value, it should generate .... So you need to add extra styles, it make size=\"4\" to be correspond with font-size: 18px;. font[size=\"4\"] { font-size: 18px; } The css mentioned above the page shows editor content too. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/03-menu/05-setLineHeight.html":{"url":"pages/03-menu/05-setLineHeight.html","title":"SetLineHeight","keywords":"","body":"Set Line Height You can set line height to use editor.config.lineHeights: const E = window.wangEditor const editor = new E('#div1') editor.config.lineHeights = ['1', '1.15', '1.6', '2', '2.5', '3'] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/03-menu/06-setEmotions.html":{"url":"pages/03-menu/06-setEmotions.html","title":"SetEmotions","keywords":"","body":"Set Emotions You can set emotions by using editor.config.emotions. They support multiple tabs in panel. const SINA_URL_PATH = 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal' const E = window.wangEditor const editor = new E('#div1') editor.config.emotions = [ { title: 'sina', // tab’s title type: 'image', // 'emoji' or 'image' content: [ { alt: '[Bad Smile]', src: `${SINA_URL_PATH}/50/pcmoren_huaixiao_org.png` }, { alt: '[Lick Screen]', src: `${SINA_URL_PATH}/40/pcmoren_tian_org.png` }, { alt: '[corrupt]', src: `${SINA_URL_PATH}/3c/pcmoren_wu_org.png` }, ] }, { title: 'emoji', // tab’s title type: 'emoji', // 'emoji' / 'image' // emoji，content must be an array content: '&#x1F600; &#x1F603; &#x1F604; &#x1F601; &#x1F606; &#x1F605; &#x1F602; &#x1F60A; &#x1F607; &#x1F642; &#x1F643; &#x1F609; &#x1F613; &#x1F62A; &#x1F634; &#x1F644; &#x1F914; &#x1F62C; &#x1F910;'.split(/\\s/), } ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/03-menu/07-hightlightCode.html":{"url":"pages/03-menu/07-hightlightCode.html","title":"HightlightCode","keywords":"","body":"Highlight Code The code menu of wangEditor support to import highlight js plugin to implement highlight code function.And it provides a variety of styles. The highlight isn't built-in function, so you need to install plugin manually. highlight.js website: highlight. Install Highlight NPM npm install highlight.js -S CDN Mount Highlight 1. import highlight.js import hljs from 'highlight.js' If you use CDN, highlight.js declare hljs variable under window object, you can use it directly. 2. import css By NPM: import 'highlight.js/styles/monokai_sublime.css' By CDN: If you finished all steps above, it will have highlight styles when you use code menu to insert code.The result as follows: Show Content You need to import highlight.js style when you read content from server to show in page. The way that install highlight.js the same as introduction above. If you want to learn more about highlight.js, you can reference offical website. Insert Code Options 1.languageType The languageType option is select box options when you insert code. We set many commonly used programming languages. If you want to set more, you can custom it by languageType: editor.config.languageType = [ 'Bash', 'C', 'C#', 'C++', 'CSS', 'Java', 'JavaScript', 'JSON', 'TypeScript', 'Plain text', 'Html', 'XML', 'SQL', 'Go', 'Kotlin', 'Lua', 'Markdown', 'PHP', 'Python', 'Shell Session', 'Ruby', ] 2.languageTab You can edit code in grey area after inserting code. We made tab key behavior to be consistent for eliminating different behavior between browsers. You can use languageTab option to set \"typing the characters\" of tab key. The default value is four full-horn spaces. editor.config.languageTab = ' ' The languageTab option decide to tab behavior within pre area. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/03-menu/08-setFullScreen.html":{"url":"pages/03-menu/08-setFullScreen.html","title":"SetFullScreen","keywords":"","body":"Set Full Screen Set Option You can use editor.config.showFullScreen to set full screen before creating editor, the default value is true. Note it is not supported when toolbar and editable area are separated. (toolbar and editable area are separated) welcome to use wangEditor editor const E = window.wangEditor const editor = new E('#div1') // cancel full screen editor.config.showFullScreen = false editor.create() API And we provide API for users(When toolbar and editable area are separated, APIs doesn't work too). editor.fullScreen() // set full screen editor.unFullScreen() // cancel full screen Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/04-Callbak/":{"url":"pages/04-Callbak/","title":"Callbak","keywords":"","body":"Callback Please refer to subdirectory. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/04-Callbak/01-Onchange.html":{"url":"pages/04-Callbak/01-Onchange.html","title":"Onchange","keywords":"","body":"Onchange Set Onchange Callback When the onchange function set, it will be executed automatically after the content change due to user's actions, such as mouse click, keyboard typing and so on. In the default case , onchange will executed automatically when the use does not operate for 200ms. If you want change delay time of onchange, you can use editor.config.onchangeTimeout property. More info about it, you can see set history config. const E = window.wangEditor const editor = new E(\"#div1\") // set onchange callback editor.config.onchange = function (newHtml) { console.log('new html when change before', newHtml) } // set the execution frequency of onchange, it's initialized to 200 milliseconds. editor.config.onchangeTimeout = 500 // 修改为 500ms editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/04-Callbak/02-Onfocus and onblur.html":{"url":"pages/04-Callbak/02-Onfocus and onblur.html","title":"Onfocus And Onblur","keywords":"","body":"Onfocus and Onblur Editable area focus callback and blur callback. const E = window.wangEditor const editor = new E('#div1') editor.config.onblur = function (newHtml) { console.log('onblur', newHtml) // get latest html content } editor.config.onfocus = function (newHtml) { console.log('onfocus', newHtml) // get latest html content } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/04-Callbak/03-Insert Event of Network Image.html":{"url":"pages/04-Callbak/03-Insert Event of Network Image.html","title":"Insert Event Of Network Image","keywords":"","body":"Insert Event of Network Image const E = window.wangEditor const editor = new E('#div1') // Insert event of network image editor.config.linkImgCallback = function (src) { console.log('img src ', src) } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/04-Callbak/04-Insert Event of Network Video.html":{"url":"pages/04-Callbak/04-Insert Event of Network Video.html","title":"Insert Event Of Network Video","keywords":"","body":"Insert Event of Network Video After inserting network video, you can customize check rule of video use editor.config.onlineVideoCallback. const E = window.wangEditor const editor = new E('#div1') // customizing insert event of network video editor.config.onlineVideoCallback = function (video) { // you can customize content of callback after inserting a video successfully. console.log('video content', video) } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/06-paste-filter/":{"url":"pages/06-paste-filter/","title":"Paste Filter","keywords":"","body":"Paste Filter Please refer to subdirectory. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/06-paste-filter/01-setStyleFilter.html":{"url":"pages/06-paste-filter/01-setStyleFilter.html","title":"SetStyleFilter","keywords":"","body":"Turn off the filtering of paste styles Note: this chapter doesn't apply to IE 11. The editor will filter out the style of content copied from website or office by default, which will make the content of the editor more concise and controllable. But if you want to keep those original styles of the copied content in editor, pasteFilterStyle is a configurable option, can make it work: editor.config.pasteFilterStyle = false; Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/06-paste-filter/02-ignorePictures.html":{"url":"pages/06-paste-filter/02-ignorePictures.html","title":"IgnorePictures","keywords":"","body":"Ignore pictures in pasted content Note: this chapter doesn't apply to IE 11. The content copied from the website or office may contain pictures in addition to the text. These pisctures from external domains generally may not be displayed due to anti-leech processing. The pasteIgnoreImg can ingore pictures in the pasted text: editor.config.pasteIgnoreImg = false If that, the picture will not be pasted if included in the copied in the text. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/06-paste-filter/03-customPastedContent.html":{"url":"pages/06-paste-filter/03-customPastedContent.html","title":"CustomPastedContent","keywords":"","body":"Custom processing of the pasted content Note: this chapter doesn't apply to IE 11. The editor can also customize the content such as filtering, append some text by using pasteTextHandle. It will not only return the customized content, but the editor will also paste the customized content just now. As shown in the following example, you can add 'balaba' after the copied text. const E = window.wangEditor const editor = new E('#div1') // Configure content handling for pasted text editor.config.pasteTextHandle = function(pasteStr) { // Customize the pasted text and return it return pasteStr + 'balabala' } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/11-custom-menu/":{"url":"pages/11-custom-menu/","title":"Custom Menu","keywords":"","body":"Custom Menu Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/11-custom-menu/01-quickly expand a menu.html":{"url":"pages/11-custom-menu/01-quickly expand a menu.html","title":"Quickly Expand A Menu","keywords":"","body":"quickly expand a menu 【Tip】Take the Button menu as an example to demonstrate. Other types of menus will be mentioned below, and the registration steps are the same. prepare // import wangEditor import E from 'wangeditor' // npm // const E = window.wangEditor // CDN // Get the necessary variables, these will be used in the following const { $, BtnMenu, DropListMenu, PanelMenu, DropList, Panel, Tooltip } = E // 【Tip】if version Menu Class // Menu class ，Button Extends BtnMenu class class AlertMenu extends BtnMenu { constructor(editor) { // data-title indicates that when the mouse hovers over the button, the function of the button is prompted const $elem = E.$( ` alert ` ) super($elem, editor) } // menu click event clickHandler() { // do what you want to do // You can refer to the [Common API] document to operate the editor alert('hello world') } // Whether the menu is activated（If not needed, this function can be empty ) // 1. What is activation? When the cursor is placed on a section of bold and underlined text, B and U in the menu bar are activated, as shown in the figure below // 2. When is this function executed? Every time the selection of the editor area changes (such as mouse operation, keyboard operation, etc.), the tryChangeActive function of each menu will be triggered to recalculate the activation state of the menu tryChangeActive() { //active menu // 1. the DOM node will add a .w-e-active css class // 2. this.this.isActive === true this.active() // // unactive menu // // 1. the DOM node will remove .w-e-active css class // // 2. this.this.isActive === false // this.unActive() } } Register Menu const editor = new E('#div1') // register menu const menuKey = 'alertMenuKey' // menu key ，must be unique editor.menus.extend('alertMenuKey', AlertMenu) // put menu in editor.config.menus // You can also adjust the order of the menus through the configuration menus, refer to the document in the [Configuration Menu] section editor.config.menus = editor.config.menus.concat(menuKey) // After registering the menu, then create the editor, the order is very important editor.create() TypeScript In the next document, when you refer to the source code to develop DropList, Panel, Tooltip, if you use TypeScript to develop, you may use some built-in types of wangEditor, which can be obtained in this way 【Tip】 wangEditor version >= v4.0.6 。 import { DropListConf, DropListItem, PanelTabConf, PanelConf, TooltipConfItemType } from 'wangeditor' Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/11-custom-menu/02-Button menu.html":{"url":"pages/11-custom-menu/02-Button menu.html","title":"Button Menu","keywords":"","body":"Button Menu check the previous section, it show the Button Menu Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/11-custom-menu/03-DropList menu.html":{"url":"pages/11-custom-menu/03-DropList menu.html","title":"DropList Menu","keywords":"","body":"DropList Menu DropList menu, when the mouse is over the menu, the drop-down list will be displayed, as shown in the figure below. The class code for developing a DropList menu is as follows. In addition, the registration menu is the same as the process above and will not be repeated. // The class of the title menu can be used as a reference code for the DropList menu class Head extends DropListMenu { constructor(editor) { // DOM element of the title menu in the menu bar // Note that the $ here is not jQuery, but E.$ (the DOM manipulation tool that comes with wangEditor, similar to jQuery) // The data-title attribute indicates a brief description of the function of the button when the mouse hovers over the button const $elem = $('') // droplist conf const dropListConf = { width: 100, title: 'Set Title', type: 'list', list: [ { $elem: $('H1'), value: '' }, { $elem: $('H2'), value: '' }, { $elem: $('H3'), value: '' }, { $elem: $('H4'), value: '' }, { $elem: $('H5'), value: '' }, { $elem: $('Paragraph'), value: '' }, ], // The click event of each item in the droplist clickHandler: (value) => { // The value parameter is the value configured in dropListConf.list this.command(value) }, } super($elem, editor, dropListConf) } command(value) { // set title this.editor.cmd.do('formatBlock', value) } // if the menu need to be activated tryChangeActive() { const reg = /^h/i const cmdValue = this.editor.cmd.queryCommandValue('formatBlock') if (reg.test(cmdValue)) { // The selection is in the title, activate the menu this.active() } else { // Otherwise, unActive this.unActive() } } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/11-custom-menu/04-Panel menu.html":{"url":"pages/11-custom-menu/04-Panel menu.html","title":"Panel Menu","keywords":"","body":"Pancel Menu Panel menu, when you click the menu, the panel will pop up, as shown in the figure below. To develop a Panel menu, you can directly refer to the source code of the video menu, which is easier to understand. Pay attention to the source code: Ignore the type of typescript Ignore MenuActive in index.ts Ignore the getRandom method in create-panel-conf.ts, just define the string yourself In short, check the main process and don’t be affected by unimportant things the registration menu is the same as the process above and will not be repeated. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/11-custom-menu/05-custom tooltip.html":{"url":"pages/11-custom-menu/05-custom tooltip.html","title":"Custom Tooltip","keywords":"","body":"custom tooltip In the editing area, you can use tooltip to achieve more complex operations, such as the link in the figure below, you can use tooltip to view and delete links. To customize the tooltip, you can refer to the link tooltip source code. execute the bindEvent function in index.ts before editor.create(). editor.txt.eventHooks is needed to implement the tooltip, please check the next section. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/11-custom-menu/06-event hooks.html":{"url":"pages/11-custom-menu/06-event hooks.html","title":"Event Hooks","keywords":"","body":"Event hooks in the editing area What it is If you want to monitor various event callbacks in the editing area, such as mouse click, keyup, paste, click image, click link, scroll, etc., you don’t need to write it yourself. The editor is all defined and open to use. // eventHooks { dropEvents: Function[] clickEvents: Function[] keyupEvents: Function[] tabUpEvents: Function[] // tab （keyCode === ）Up tabDownEvents: Function[] // tab （keyCode === 9）Down enterUpEvents: Function[] // enter （keyCode === 13）up deleteUpEvents: Function[] // del（keyCode === 8）up deleteDownEvents: Function[] // del（keyCode === 8）down pasteEvents: Function[] // paste linkClickEvents: Function[] // click textScrollEvents: Function[] // scroll toolbarClickEvents: Function[] // click toolbarl imgClickEvents: Function[] //click image // etc } For all eventHooks and the internal implementations, please refer to code How to use Using eventHooks is very simple, for example, it is used in the linked tooltip source code. Define a function and push to the corresponding eventHooks. // function showLinkTooltip() { /* show tooltip */ } // function hideLinkTooltip() { /* hide tooltip */ } // click link to show tooltip editor.txt.eventHooks.linkClickEvents.push(showLinkTooltip) // click other place ，like keyupEvents，or scroll，to hide tooltip editor.txt.eventHooks.clickEvents.push(hideLinkTooltip) editor.txt.eventHooks.keyupEvents.push(hideLinkTooltip) editor.txt.eventHooks.toolbarClickEvents.push(hideLinkTooltip) editor.txt.eventHooks.textScrollEvents.push(hideLinkTooltip) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "},"pages/11-custom-menu/07-more reference.html":{"url":"pages/11-custom-menu/07-more reference.html","title":"More Reference","keywords":"","body":"More reference source code More menu codes examples wangEditor Menu Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-01-13 07:52:14 "}}