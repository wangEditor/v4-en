{"./":{"url":"./","title":"Introduction","keywords":"","body":" wangEditor A lightweight rich text editor, friendly API and use extremely conventient. Offical website · Explore the docs » 中文文档 · View Demo · Report Bug · Request Feature About The Project wangEditor is a web rich text editor that use typescript develop. It's lightweight, simple, use convience and open source. It support most of modern browsers: Chrome, Firefox, Safar, Edge, QQ, IE11 and so on. It doesn't support mobile browers. Usage Use NPM Package npm install wangeditor --save A few lines code for creating editor instance： import E from \"wangeditor\"; const editor = new E(\"#div1\"); editor.create(); Use CDN const E = window.wangEditor const editor = new E('#div1') // or const editor = new E(document.getElementById('div1')) editor.create() Contributing Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are greatly appreciated. Before contributing wangEditor, You must read contribution docs. License Distributed under the MIT License. See MIT License for more information. Contact Wangfupeng - wangfupeng1988@163.com Project Link: https://github.com/wangeditor-team/wangEditor Developer Team We have a professional developer team, if you want to join us, you can send email to wangfupeng1988@163.com. If you are a chinese developer, you can join our QQ group or read chinese docs for more information. Support Us Your support will encourage us to output more quality content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/01-get started/":{"url":"pages/01-get started/","title":"Get Started","keywords":"","body":"Get Started Please refer to subdirectory. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/01-get started/01-basic usage.html":{"url":"pages/01-get started/01-basic usage.html","title":"Basic Usage","keywords":"","body":"Basic Usage CDN weblcome use wangEditor richEditor const E = window.wangEditor const editor = new E('#div1') // or const editor = new E( document.getElementById('div1') ) editor.create() Npm import E from 'wangeditor' const editor = new E('#div1') // or const editor = new E( document.getElementById('div1') ) editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/01-get started/02-edit height.html":{"url":"pages/01-get started/02-edit height.html","title":"Edit Height","keywords":"","body":"Editable Area Height You can use editor.config.height property to change editable area height in wangEditor. By default, the editable area height is 300px. const editor = new E('#div1') // set editing area height to 500px editor.config.height = 500 // notice，you sholud set height before using create() editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/01-get started/03-split toolbar and textarea.html":{"url":"pages/01-get started/03-split toolbar and textarea.html","title":"Split Toolbar And Textarea","keywords":"","body":"Split Toolbar and Editable Area Toolbar and editable area allows to separated in wangEditor. Because Toolbar and editable area is controlled element in wangEditor, you can customize styles such as fixed toolbar、auto add editing area height and so on. .toolbar { border: 1px solid #ccc; } .text { border: 1px solid #ccc; min-height: 400px; } container and toolbar split ------ split line ------ const E = window.wangEditor const editor = new E('#toolbar-container', '#text-container') // transfer two element editor.create() From upper code , you can knows that toolbar and editable area is two div , that means you can set any style you want. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/01-get started/04-textarea.html":{"url":"pages/01-get started/04-textarea.html","title":"Textarea","keywords":"","body":"Use Textarea We can not directly submit rich text in textarea . Instead, you should use editor.config.onchange to update textarea content: webcomle use wangEditor rich text editor const E = window.wangEditor const editor = new E('#div1') const $text1 = $('#text1') editor.config.onchange = function (html) { // step two，observe change, sync update to textarea $text1.val(html) } editor.create() // frist，init textarea value $text1.val(editor.txt.html()) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/01-get started/05-Multiple Editor Instances.html":{"url":"pages/01-get started/05-Multiple Editor Instances.html","title":"Multiple Editor Instances","keywords":"","body":"Multiple Editor Instances WangEditor can create multiple editor instance in the same page. .toolbar { background-color: #f1f1f1; border: 1px solid #ccc; } .text { border: 1px solid #ccc; height: 200px; } split section first demo（menus and editable area split） second demo（noraml） const E = window.wangEditor const editor1 = new E('#div1', '#div2') editor1.create() const editor2 = new E('#div3') editor2.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/01-get started/06-Zindex.html":{"url":"pages/01-get started/06-Zindex.html","title":"Zindex","keywords":"","body":"ZIndex You can use editor.config.zIndex to change editor z-index . By default, the editor z-index is 1000. Note： z-index Need >= 0 const editor = new E('#div1') editor.config.zIndex = 500 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/01-get started/07-placeholder.html":{"url":"pages/01-get started/07-placeholder.html","title":"Placeholder","keywords":"","body":"Placeholder You can use editor.config.placeholder to change placeholder text. const editor = new E('#div1') editor.config.placeholder = 'custom placeholder txt' // editor.config.placeholder = '' // if you not use placeholder, you can get placehoder a empty string editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/01-get started/08-auto focus.html":{"url":"pages/01-get started/08-auto focus.html","title":"Auto Focus","keywords":"","body":"Auto Focus By default, the editable area will be focused when initializing. If you want to cancel auto focus that using editor.config.focus. You can use editor.config.focus to cancel auto focus. For example: const editor = new E('#div1') // cancel auto focus editor.config.focus = false editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/01-get started/09-custom alert.html":{"url":"pages/01-get started/09-custom alert.html","title":"Custom Alert","keywords":"","body":"Custom Alert When you want customize alert that use editor.config.customAlert . By default, wangEditor will be invoking window.alert. You can easy to customize alert style: import { message } from 'antd'; const editor = new E('#div1') // take Ant Design as an example editor.config.customAlert = function (s, t) { switch (t) { case 'success': message.success(s) break case 'info': message.info(s) break case 'warning': message.warning(s) break case 'error': message.error(s)cus break default: message.info(s) break } } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/02-deal content/":{"url":"pages/02-deal content/","title":"Deal Content","keywords":"","body":"yyy Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/02-deal content/01-setContent.html":{"url":"pages/02-deal content/01-setContent.html","title":"SetContent","keywords":"","body":"Set Content If conditions allow, you best to use first way in follow several ways. Use HTML You can set innerHTML content which you want to init in div for creating editor. inital content inital content const E = window.wangEditor const editor = new E('#div1') editor.create() Use JS And you can use editor.txt.html(...) to set editor content after creating editor. const E = window.wangEditor const editor = new E('#div1') editor.create() editor.txt.html('set conetnt by JS API') // set content Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/02-deal content/02-appendContent.html":{"url":"pages/02-deal content/02-appendContent.html","title":"AppendContent","keywords":"","body":"Append Content After creating editor, you can use editor.txt.append('content') to append content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/02-deal content/03-getHTML.html":{"url":"pages/02-deal content/03-getHTML.html","title":"GetHTML","keywords":"","body":"Get HTML Content The editor.txt.html() is used to get HTML content. Note the html which get from editor doesn't contains any style.it means that you can implement changing theme function by yourself.if you want to custom the styles for tags such as , , and so on, The editor styles are provided below for your reference： /* table styles */ table { border-top: 1px solid #ccc; border-left: 1px solid #ccc; } table td, table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; padding: 3px 5px; } table th { border-bottom: 2px solid #ccc; text-align: center; } /* blockquote styles */ blockquote { display: block; border-left: 8px solid #d0e5f2; padding: 5px 10px; margin: 10px 0; line-height: 1.4; font-size: 100%; background-color: #f1f1f1; } /* code styles */ code { display: inline-block; *display: inline; *zoom: 1; background-color: #f1f1f1; border-radius: 3px; padding: 3px 5px; margin: 0 3px; } pre code { display: block; } /* ul ol styles */ ul, ol { margin: 10px 0 10px 20px; } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/02-deal content/04-getText.html":{"url":"pages/02-deal content/04-getText.html","title":"GetText","keywords":"","body":"Get Text Content The editor.txt.text() is used to get text content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/02-deal content/05-getJSON.html":{"url":"pages/02-deal content/05-getJSON.html","title":"GetJSON","keywords":"","body":"Get Or Set JSON Data Get JSON You can use editor.txt.getJSON() to get JSON content, the format as follows: [ { \"tag\": \"p\", \"attrs\": [], \"children\": [ \"welcome to use \", { \"tag\": \"b\", \"attrs\": [], \"children\": [ \"wangEditor\" ] }, \"rich text editor\" ] }, { \"tag\": \"p\", \"attrs\": [], \"children\": [ { \"tag\": \"img\", \"attrs\": [ { \"name\": \"src\", \"value\": \"xxx.png\" }, { \"name\": \"style\", \"value\": \"max-width:100%;\" } ] } ] } ] Set JSON You can also use editor.txt.setJSON(json) API to set JSON content, the json param format must be consistent with mentioned above. Note setJSON API is supported started with v4.3.0. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/02-deal content/06-clear.html":{"url":"pages/02-deal content/06-clear.html","title":"Clear","keywords":"","body":"Clear Content The editor.txt.clear() is used to clear editor content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/02-deal content/07-history.html":{"url":"pages/02-deal content/07-history.html","title":"History","keywords":"","body":"History Setting There are two ways to set History mode: standard mode(for modern browsers) and compatible mode (for IE and old Edge).You can set history mode by editor.config.compatibleMode. And about the max size of History, you can set it by editor.config.historyMaxSize. The following shows how to use them. The editor.config.onchangeTimeout can be used to set the delay time of History records (when users are not active after x millisecond) on compatible mode. const E = window.wangEditor const editor = new E(\"#div1\") // by default，IE and old Edge use compatible mode，if you want to set the mode for other browsers, you can set a function. editor.config.compatibleMode = function () { // return true for compatible mode, otherwise return false for standard mode. return true } // when we use compatible mode, we can set recording time by onchangeTimeout，the default value is 200 ms. editor.config.onchangeTimeout = 500 // change to 500 ms // you aslo can set max size for history, the default value is 30. editor.config.historyMaxSize = 50 // change to 50 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/03-menu/":{"url":"pages/03-menu/","title":"Menu","keywords":"","body":"Menu Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/03-menu/01-setMenus.html":{"url":"pages/03-menu/01-setMenus.html","title":"SetMenus","keywords":"","body":"Set Menus You should set menus before creating editor. editor.config.menus The option is defined for menus which are visible and menus order. For example: welcome to use wangEditor editor const E = window.wangEditor const editor = new E('#div1') // set menus, change order editor.config.menus = [ 'bold', 'head', 'link', 'italic', 'underline' ] editor.create() editor.config.excludeMenus The option is defined for menus are excluded. For example: welcome to use wangEditor editor const E = window.wangEditor const editor = new E('#div1') // set exclude menus editor.config.excludeMenus = [ 'emoticon', 'video' ] editor.create() Note in order to avoid conflict, don't both set menus and excludeMenus. All Menus By default, editor show all menus, there are as follows: editor.config.menus = [ 'head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'indent', 'lineHeight', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'video', 'table', 'code', 'splitLine', 'undo', 'redo', 'todo', ] Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/03-menu/02-setColors.html":{"url":"pages/03-menu/02-setColors.html","title":"SetColors","keywords":"","body":"Set Colors You can set font color and background color to use editor.config.colors: const E = window.wangEditor const editor = new E('#div1') // set color and background color editor.config.colors = [ '#000000', '#eeece0', '#1c487f', '#4d80bf' ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/03-menu/03-setFontFamily.html":{"url":"pages/03-menu/03-setFontFamily.html","title":"SetFontFamily","keywords":"","body":"Set Font Size You can set font family to use editor.config.fontNames: const E = window.wangEditor const editor = new E('#div1') editor.config.fontNames = [ 'Arial' 'Tahoma', 'Verdana', 'Times New Roman', 'Courier New', ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/03-menu/04-setFontSize.html":{"url":"pages/03-menu/04-setFontSize.html","title":"SetFontSize","keywords":"","body":"Set Font Size You can set font size to use editor.config.fontSizes: const E = window.wangEditor const editor = new E('#div1') editor.config.fontSizes = { 'x-small': { name: '10px', value: '1' }, 'small': { name: '13px', value: '2' }, 'normal': { name: '16px', value: '3' }, 'large': { name: '18px', value: '4' }, 'x-large': { name: '24px', value: '5' }, 'xx-large': { name: '32px', value: '6' }, 'xxx-large': { name: '48px', value: '7' }, } editor.create() Note especially in above example: key value that x-small, small, normal can't change, the key value only can decrease. value is '1 - 7' can't change too, it only can decrease. And the key must be correspond with value.Such as, small is correspond with 2. So in above example, you can change name. It will not work immediately after the modification, and some adjustments need to be made. Taking 'large': { name: '18px', value: '4' } as an example, when you set the font size value, it should generate .... So you need to add extra styles, it make size=\"4\" to be correspond with font-size: 18px;. font[size=\"4\"] { font-size: 18px; } The css mentioned above the page shows editor content too. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/03-menu/05-setLineHeight.html":{"url":"pages/03-menu/05-setLineHeight.html","title":"SetLineHeight","keywords":"","body":"Set Line Height You can set line height to use editor.config.lineHeights: const E = window.wangEditor const editor = new E('#div1') editor.config.lineHeights = ['1', '1.15', '1.6', '2', '2.5', '3'] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/03-menu/06-setEmotions.html":{"url":"pages/03-menu/06-setEmotions.html","title":"SetEmotions","keywords":"","body":"Set Emotions You can set emotions by using editor.config.emotions. They support multiple tabs in panel. const SINA_URL_PATH = 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal' const E = window.wangEditor const editor = new E('#div1') editor.config.emotions = [ { title: 'sina', // tab’s title type: 'image', // 'emoji' or 'image' content: [ { alt: '[Bad Smile]', src: `${SINA_URL_PATH}/50/pcmoren_huaixiao_org.png` }, { alt: '[Lick Screen]', src: `${SINA_URL_PATH}/40/pcmoren_tian_org.png` }, { alt: '[corrupt]', src: `${SINA_URL_PATH}/3c/pcmoren_wu_org.png` }, ] }, { title: 'emoji', // tab’s title type: 'emoji', // 'emoji' / 'image' // emoji，content must be an array content: '&#x1F600; &#x1F603; &#x1F604; &#x1F601; &#x1F606; &#x1F605; &#x1F602; &#x1F60A; &#x1F607; &#x1F642; &#x1F643; &#x1F609; &#x1F613; &#x1F62A; &#x1F634; &#x1F644; &#x1F914; &#x1F62C; &#x1F910;'.split(/\\s/), } ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/03-menu/07-hightlightCode.html":{"url":"pages/03-menu/07-hightlightCode.html","title":"HightlightCode","keywords":"","body":"Highlight Code The code menu of wangEditor support to import highlight js plugin to implement highlight code function.And it provides a variety of styles. The highlight isn't built-in function, so you need to install plugin manually. highlight.js website: highlight. Install Highlight NPM npm install highlight.js -S CDN Mount Highlight 1. import highlight.js import hljs from 'highlight.js' If you use CDN, highlight.js declare hljs variable under window object, you can use it directly. 2. import css By NPM: import 'highlight.js/styles/monokai-sublime.css' By CDN: If you finished all steps above, it will have highlight styles when you use code menu to insert code.The result as follows: Show Content You need to import highlight.js style when you read content from server to show in page. The way that install highlight.js the same as introduction above. If you want to learn more about highlight.js, you can reference offical website. Insert Code Options 1.languageType The languageType option is select box options when you insert code. We set many commonly used programming languages. If you want to set more, you can custom it by languageType: editor.config.languageType = [ 'Bash', 'C', 'C#', 'C++', 'CSS', 'Java', 'JavaScript', 'JSON', 'TypeScript', 'Plain text', 'Html', 'XML', 'SQL', 'Go', 'Kotlin', 'Lua', 'Markdown', 'PHP', 'Python', 'Shell Session', 'Ruby', ] 2.languageTab You can edit code in grey area after inserting code. We made tab key behavior to be consistent for eliminating different behavior between browsers. You can use languageTab option to set \"typing the characters\" of tab key. The default value is four full-horn spaces. editor.config.languageTab = ' ' The languageTab option decide to tab behavior within pre area. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/03-menu/08-setFullScreen.html":{"url":"pages/03-menu/08-setFullScreen.html","title":"SetFullScreen","keywords":"","body":"Set Full Screen Set Option You can use editor.config.showFullScreen to set full screen before creating editor, the default value is true. Note it is not supported when toolbar and editable area are separated. (toolbar and editable area are separated) welcome to use wangEditor editor const E = window.wangEditor const editor = new E('#div1') // cancel full screen editor.config.showFullScreen = false editor.create() API And we provide API for users(When toolbar and editable area are separated, APIs doesn't work too). editor.fullScreen() // set full screen editor.unFullScreen() // cancel full screen Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/03-menu/09-setMenuTooltip.html":{"url":"pages/03-menu/09-setMenuTooltip.html","title":"SetMenuTooltip","keywords":"","body":"Set Menu Tooltip editor.config.showMenuTooltips The editor's menu tooltip can be configured via editor.config.showMenuTooltips. const E = window.wangEditor const editor = new E('#div1') // Hide menu tooltip editor.config.showMenuTooltips = false editor.create() editor.config.menuTooltipPosition The upper or lower position can be displayed through the editor.config.menuTooltipPosition configuration. const E = window.wangEditor const editor = new E('#div1') // if you want the tooltip appear on top of the menu，you can set: editor.config.menuTooltipPosition = 'up' // default configuration // if you want the tooltip appear on bottom of the menu，you can set: // editor.config.menuTooltipPosition = 'down' // Choose one of the above configurations editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/04-Callbak/":{"url":"pages/04-Callbak/","title":"Callbak","keywords":"","body":"Callback Please refer to subdirectory. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/04-Callbak/01-Onchange.html":{"url":"pages/04-Callbak/01-Onchange.html","title":"Onchange","keywords":"","body":"Onchange Set Onchange Callback When the onchange function set, it will be executed automatically after the content change due to user's actions, such as mouse click, keyboard typing and so on. In the default case , onchange will executed automatically when the use does not operate for 200ms. If you want change delay time of onchange, you can use editor.config.onchangeTimeout property. More info about it, you can see set history config. const E = window.wangEditor const editor = new E(\"#div1\") // set onchange callback editor.config.onchange = function (newHtml) { console.log('new html when change before', newHtml) } // set the execution frequency of onchange, it's initialized to 200 milliseconds. editor.config.onchangeTimeout = 500 // 修改为 500ms editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/04-Callbak/02-Onfocus and onblur.html":{"url":"pages/04-Callbak/02-Onfocus and onblur.html","title":"Onfocus And Onblur","keywords":"","body":"Onfocus and Onblur Editable area focus callback and blur callback. const E = window.wangEditor const editor = new E('#div1') editor.config.onblur = function (newHtml) { console.log('onblur', newHtml) // get latest html content } editor.config.onfocus = function (newHtml) { console.log('onfocus', newHtml) // get latest html content } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/04-Callbak/03-Insert Event of Network Image.html":{"url":"pages/04-Callbak/03-Insert Event of Network Image.html","title":"Insert Event Of Network Image","keywords":"","body":"Insert Event of Network Image const E = window.wangEditor const editor = new E('#div1') // Insert event of network image editor.config.linkImgCallback = function (src) { console.log('img src ', src) } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/04-Callbak/04-Insert Event of Network Video.html":{"url":"pages/04-Callbak/04-Insert Event of Network Video.html","title":"Insert Event Of Network Video","keywords":"","body":"Insert Event of Network Video After inserting network video, you can customize check rule of video use editor.config.onlineVideoCallback. const E = window.wangEditor const editor = new E('#div1') // customizing insert event of network video editor.config.onlineVideoCallback = function (video) { // you can customize content of callback after inserting a video successfully. console.log('video content', video) } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/05-Content check/":{"url":"pages/05-Content check/","title":"Content Check","keywords":"","body":"Content check Please refer to subdirectory. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/05-Content check/01-link check.html":{"url":"pages/05-Content check/01-link check.html","title":"Link Check","keywords":"","body":"Link Check You can use editor.config.linkCheck to customize check rules of link. const E = window.wangEditor const editor = new E('#div1') // Custom check rule of link editor.config.linkCheck = function(text, link) { // have three case // 1. If return true,mean that check passed. return true //2. If return string, mean that check failed. this case editor will stop insert link, and alert error info(when return string) // return 'link have xxx error' // If return undefined, mean that check failed. this case editor will stop insert link. // In this case, you can custom error info. } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/05-Content check/02-Network image check.html":{"url":"pages/05-Content check/02-Network image check.html","title":"Network Image Check","keywords":"","body":"Network Image Check You can use editor.config.linkImgCheck to customize check rules of network image. const E = window.wangEditor const editor = new E('#div1') // Custom check rules of network image editor.config.linkImgCheck = function(imgSrc) { // Have three case // 1. If return true,mean that check passed. return true //2. If return string, mean that check failed. this case editor will stop insert image, and alert error info(when return string) // return 'image have xxx error' // If return undefined, mean that check failed. this case editor will stop insert image. // In this case, you can customize error info. } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/05-Content check/03-Video check.html":{"url":"pages/05-Content check/03-Video check.html","title":"Video Check","keywords":"","body":"Video Check You can use editor.config.linkVedioCheck to customize check rules of network video. const E = window.wangEditor const editor = new E('#div1') // custom check rules of network video editor.config.linkImgCheck = function(video) { // Have three case // 1. If return true,mean that check passed. return true //2. If return string, mean that check failed. this case editor will stop insert video, and alert error info(when return string). // return 'video have xxx error'. // If return undefined, mean that check failed. this case editor will stop insert video. // In this case, you can customize error info. } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/06-paste-filter/":{"url":"pages/06-paste-filter/","title":"Paste Filter","keywords":"","body":"Paste Filter Please refer to subdirectory. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/06-paste-filter/01-setStyleFilter.html":{"url":"pages/06-paste-filter/01-setStyleFilter.html","title":"SetStyleFilter","keywords":"","body":"Turn off the filtering of paste styles Note: this chapter doesn't apply to IE 11. The editor will filter out the style of content copied from website or office by default, which will make the content of the editor more concise and controllable. But if you want to keep those original styles of the copied content in editor, pasteFilterStyle is a configurable option, can make it work: editor.config.pasteFilterStyle = false; Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/06-paste-filter/02-ignoreImages.html":{"url":"pages/06-paste-filter/02-ignoreImages.html","title":"IgnoreImages","keywords":"","body":"Ignore Images in Pasted Content Note: this chapter doesn't apply to IE 11. The content copied from the website or office may contain images in addition to the text. These pisctures from external domains generally may not be displayed due to anti-leech processing. The pasteIgnoreImg can ingore images in the pasted text: editor.config.pasteIgnoreImg = false If that, the image will not be pasted if included in the copied in the text. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/06-paste-filter/03-customPastedContent.html":{"url":"pages/06-paste-filter/03-customPastedContent.html","title":"CustomPastedContent","keywords":"","body":"Custom processing of the pasted content Note: this chapter doesn't apply to IE 11. The editor can also customize the content such as filtering, append some text by using pasteTextHandle. It will not only return the customized content, but the editor will also paste the customized content just now. As shown in the following example, you can add 'balaba' after the copied text. const E = window.wangEditor const editor = new E('#div1') // Configure content handling for pasted text editor.config.pasteTextHandle = function(pasteStr) { // Customize the pasted text and return it return pasteStr + 'balabala' } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/":{"url":"pages/07-upload images/","title":"Upload Images","keywords":"","body":"Upload Images Please refer to subdirectory. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/01-config server interface.html":{"url":"pages/07-upload images/01-config server interface.html","title":"Config Server Interface","keywords":"","body":"Config Server Interface Note: If you have trouble in uploading images, please open the browser developer tools and check the error message output by console.error. Config Interface const E = window.wangEditor const editor = new E('#div1') // config the address of the interface editor.config.uploadImgServer = '/upload-img' editor.create() The image menu of the editor will display the tab and icon of the uploaded image, after the configuration is complete, as shown in the figure below. It is important that the format of the server's return is!!! The interface should return application/json format, the format requirements are as follows. { // The `error` is an error flag, 0 means no error, other values mean there is an error, it can be obtained through the following monitoring function `fail`, and handle it. \"errno\": 0, // This `data`, which returns an address online, is a array. \"data\": [ \"图片1地址\", \"图片2地址\", \"……\" ] } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/02-limit images' size and type.html":{"url":"pages/07-upload images/02-limit images' size and type.html","title":"Limit Images' Size And Type","keywords":"","body":"Limit Images' Size and Type Limit Images' Size The default image size is 5M, you can modify it yourself. editor.config.uploadImgMaxSize = 2 * 1024 * 1024 // 2M Limit Images' type You can push the accepted types in uploadImgAccept array. editor.config.uploadImgAccept = ['jpg', 'jpeg', 'png', 'gif', 'bmp'] The default accepted types are: ['jpg', 'jpeg', 'png', 'gif', 'bmp'] If you want the types to be unlimited, you can set an empty array. editor.config.uploadImgAccept = [] Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/03-limit the number of uploading pictures.html":{"url":"pages/07-upload images/03-limit the number of uploading pictures.html","title":"Limit The Number Of Uploading Pictures","keywords":"","body":"Limit the Number of Uploading Images 100 images can be uploaded by default, but it can be configured if you need to change it. // upload 5 images at most once editor.config.uploadImgMaxLength = 5 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/04-custom upload parameters.html":{"url":"pages/07-upload images/04-custom upload parameters.html","title":"Custom Upload Parameters","keywords":"","body":"Custom Upload Parameters Some parameters can be customized when uploading images, such as token which used to pass verification. These parameters will be added to formData, then the whole will be uploaded to the server. editor.config.uploadImgParams = { token: 'xxxxx', x: 100 } If you need to splice parameters into url, you can add the following configuration. editor.config.uploadImgParamsWithUrl = true Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/05-custom fileName.html":{"url":"pages/07-upload images/05-custom fileName.html","title":"Custom FileName","keywords":"","body":"Custom FileName You can customize the value of the fileName while uploading images, that means When using formData.append(name, file) to add a image, the first parameter can be set by yourself. editor.config.uploadFileName = 'your-custom-fileName' Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/06-custom header.html":{"url":"pages/07-upload images/06-custom header.html","title":"Custom Header","keywords":"","body":"Custom Header Adding the http request header when uploading images. editor.config.uploadImgHeaders = { Accept: 'text/x-json', a: 100, } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/07-withCredentials.html":{"url":"pages/07-upload images/07-withCredentials.html","title":"WithCredentials","keywords":"","body":"WithCredentials(pass cookie axross domains) You need to set withCredentials, if you want to pass cookies in the case of cross-domain. editor.config.withCredentials = true Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/08-custom timeout time.html":{"url":"pages/07-upload images/08-custom timeout time.html","title":"Custom Timeout Time","keywords":"","body":"Custom Timeout The timeout is the maximum time the upload interface waits, which is 10 seconds by default, you can modify it yourself. editor.config.uploadImgTimeout = 5 * 1000 Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/09-callback.html":{"url":"pages/07-upload images/09-callback.html","title":"Callback","keywords":"","body":"The Callback You can use the callback function to handle the different stages of uploading images. The code example is as follows. editor.config.uploadImgHooks = { // before upload before: function(xhr) { console.log(xhr) // You can prevent users from uploading. return { prevent: true, msg: 'the msg for user' } }, // The image is uploaded and the result is returned, the image is inserted successfully. success: function(xhr) { console.log('success', xhr) }, // The image has been uploaded and server has returned the result, but an error occurred when inserting the image. fail: function(xhr, editor, resData) { console.log('fail', resData) }, // Error uploading images, it is usually http request error error: function(xhr, editor, resData) { console.log('error', xhr, resData) }, // Timeout while uploading images timeout: function(xhr) { console.log('timeout') }, // The image is uploaded and the result is returned, and I want to insert the image into the editor by myself. // For example, the format returned by the server is not `{errno: 0, data: [...] }` this style, you can use `customInsert`. customInsert: function(insertImgFn, result) { // `result` is the interface returned by th server. console.log('customInsert', result) // `insertImgFn` can insert images into the editor, pass in the image's src and execute the function. insertImgFn(result.data[0]) } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/10-upload images by yourself.html":{"url":"pages/07-upload images/10-upload images by yourself.html","title":"Upload Images By Yourself","keywords":"","body":"Upload Images by Yourself If you want to completely implement the image upload process yourself, such as uploading a image to a cloud server, you can use the following code. editor.config.customUploadImg = function (resultFiles, insertImgFn) { // `resultFiles` is the file list selected in input. // insertImgFn is the function to insert into the editor after getting the images's url // upload the image, and return the result, then insert the image into the editor insertImgFn(imgUrl) } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/11-save images in base64 format.html":{"url":"pages/07-upload images/11-save images in base64 format.html","title":"Save Images In Base64 Format","keywords":"","body":"Save Images in Base64 Format Setting editor.config.uploadImgShowBase64 = true to save images in base64 format. That is, you can select a local image, and the editor will display the image in base64 format. Note:uploadImgShowBase64 (base64 format) and uploadImgServer (upload images to the server) cannot be used at the same time! ! ! Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/12-hide inserted network image.html":{"url":"pages/07-upload images/12-hide inserted network image.html","title":"Hide Inserted Network Image","keywords":"","body":"Hide Inserted Network Image You can set editor.config.showLinkImg = false to hide the function of inserting network images, that is, only keep uploading local images. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/07-upload images/13-upload-img-to-oss.html":{"url":"pages/07-upload images/13-upload-img-to-oss.html","title":"Upload Img To Oss","keywords":"","body":"Upload Img to OSS You can reference upload image by yourself to achieve the feature of uploading img to OSS service. First, you should install OSS tool then coding as follows: // Every value should be got from Alibaba Cloud's control panel let client = new OSS({ // region: '', // accessKeyId: '', // accessKeySecret: '', // bucket: 'Your bucket name', }); editor.config.customUploadImg = function (resultFiles, insertImgFn) { // resultFiles is files that input select. // insertImgFn is a function that get img url to insert editor. client.put('myImg', resultFiles[0]) .then(function (res) { // Uploading img and return result, then insert img to editor. insertImgFn(res.url) }).catch(function (err) { console.log(err) }) } In China, most of developers use Alibaba Cloud service, but you can choose cloud service which you like. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/08-API/":{"url":"pages/08-API/","title":"API","keywords":"","body":"API Please refer to subdirectory. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/08-API/01-editor-attrs.html":{"url":"pages/08-API/01-editor-attrs.html","title":"Editor Attrs","keywords":"","body":"Editor Attrs You can get some editor info by attrs as follows. editor.id The unique id of editor. editor.config The all configs of editor. editor.$textElem.elems[0] The dom of editable area. editor.textElemId The id of editor text element. editor.$toolbarElem.elems[0] The dom of editor menu. editor.toolbarElemId The id of editor menu element. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/08-API/02-selection-api.html":{"url":"pages/08-API/02-selection-api.html","title":"Selection Api","keywords":"","body":"Selection API editor.selection.getSelectionText Getting the text of selected. editor.selection.getSelectionContainerElem().elems[0] Getting the dom of selection. editor.selection.getSelectionStartElem().elems[0] Getting the starting dom of selection. editor.selection.getSelectionEndElem().elems[0] Getting the ending dom of selection. editor.selection.collapseRange Collapsing the selection of editor. editor.selection.isSelectionEmpty Getting result if the selection is empty. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/08-API/03-content-api.html":{"url":"pages/08-API/03-content-api.html","title":"Content Api","keywords":"","body":"Content API If you want to know common usage of content, you can reference following docs: content. editor.cmd.do(name: string, value: string) Inserting text at cursor position. editor.cmd.do(name, value) API is equal to browser native API: document.execCommand(name, false, value), you can learn more about it to visit following link: docs. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/08-API/04-disable-editor.html":{"url":"pages/08-API/04-disable-editor.html","title":"Disable Editor","keywords":"","body":"Disable Editor Note it is supported from v4.1.0. If you disabled editor, you only can read content, and do not edit it. You can edit content after canceling disabled. // create editor const E = window.wangEditor const editor = new E('#div1') editor.create() // Disabled editor by disable API $btn1.click(() => { editor.disable() }) // Cancel disabled by enable API $btn2.click(() => { editor.enable() }) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/08-API/05-destroy-editor.html":{"url":"pages/08-API/05-destroy-editor.html","title":"Destroy Editor","keywords":"","body":"Destroy Editor You can destroy editor instance by using editor.destroy(). The following example of Vue2.0: import E from 'wangeditor' export default { data() { return { editor: null } }, mounted() { // create editor this.editor = new E(`#demo`) this.editor.create() }, beforeDestroy() { // destroy editor this.editor.destroy() this.editor = null } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/08-API/06-scroll-to-head.html":{"url":"pages/08-API/06-scroll-to-head.html","title":"Scroll To Head","keywords":"","body":"Scroll to Head As following figure, you can get all titles of editor content, and scrolling to specified title by using editor.scrollToHead(headId) API. Note it is supported from v4.5.0. Get All Titles You can get all titles of editor by listening onCatalogChange callback, if title changed, and it will trigger onCatalogChange callback. editor.config.onCatalogChange = function (headList) { /* headList format [ { id: \"eold9\", // title id tag: \"H1\", text: \"text\" }, { ... }, { ... } ] */ // you can render it by yourself. } Scroll to Specified Title You can invoke editor.scrollToHead(headId) to scroll to specified title. Getting headId by id attr as above example format. Show Content You can get html content by using editor.txt.html() API. The title is also with id attr. The format as follows: title1 content title2 content title3 content In order to achieve the function of scroll-to-head, you can use these id for anchor when generating these content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/09-Vue and React/":{"url":"pages/09-Vue and React/","title":"Vue And React","keywords":"","body":"Vue and React Using wangEditor in vue: You can refer to wangEditor-with-vue3 if using vue3. You can refer to wangEditor-with-vue if using vue2. You can refer to wangEditor-with-react if using wangEditor in React. Notice that you likely destroy editor if using wangEditor in Vue and React. You can refer to destroy editor. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/10-Using Typescript/":{"url":"pages/10-Using Typescript/","title":"Using Typescript","keywords":"","body":"Using Typescript WangEditor can use typescript in development environment. More info refer to wangEditor-with-ts. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/11-custom-menu/":{"url":"pages/11-custom-menu/","title":"Custom Menu","keywords":"","body":"Custom Menu Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/11-custom-menu/01-quickly expand a menu.html":{"url":"pages/11-custom-menu/01-quickly expand a menu.html","title":"Quickly Expand A Menu","keywords":"","body":"Quickly Expand a Menu 【Tip】Take the Button menu as an example to demonstrate. Other types of menus will be mentioned below, and the registration steps are the same. Prepare // import wangEditor import E from 'wangeditor' // npm // const E = window.wangEditor // CDN // Get the necessary variables, these will be used in the following const { $, BtnMenu, DropListMenu, PanelMenu, DropList, Panel, Tooltip } = E // 【Tip】if version Menu Class // Menu class ，Button Extends BtnMenu class class AlertMenu extends BtnMenu { constructor(editor) { // data-title indicates that when the mouse hovers over the button, the function of the button is prompted const $elem = E.$( ` alert ` ) super($elem, editor) } // menu click event clickHandler() { // do what you want to do // You can refer to the [Common API] document to operate the editor alert('hello world') } // Whether the menu is activated（If not needed, this function can be empty ) // 1. What is activation? When the cursor is placed on a section of bold and underlined text, B and U in the menu bar are activated, as shown in the figure below // 2. When is this function executed? Every time the selection of the editor area changes (such as mouse operation, keyboard operation, etc.), the tryChangeActive function of each menu will be triggered to recalculate the activation state of the menu tryChangeActive() { //active menu // 1. the DOM node will add a .w-e-active css class // 2. this.this.isActive === true this.active() // // unactive menu // // 1. the DOM node will remove .w-e-active css class // // 2. this.this.isActive === false // this.unActive() } } Register Menu [Tips]It's recommended to use the global mode to register the menu. If there are multiple editors and the custom menu of each editor is different, using the Instance mode to register the menu. Global Mode // register menu const menuKey = 'alertMenuKey' // menu key ，must be unique E.registerMenu(menuKey, AlertMenu) const editor = new E('#div1') editor.create() const editor2 = new E('#div2') editor2.create() Instance Mode const menuKey = 'alertMenuKey' // menu key ，must be unique const menuKey2 = 'alertMenuKey2' const editor = new E('#div1') // register menu editor.menus.extend(menuKey, AlertMenu) // put menu in editor.config.menus // You can also adjust the order of the menus through the configuration menus, refer to the document in the [Configuration Menu] section //editor.config.menus.push(menuKey) editor.config.menus = editor.config.menus.concat(menuKey) // After registering the menu, then create the editor, the order is very important editor.create() const editor2 = new E('#div2') editor2.menus.extend(menuKey2, AlertMenu) editor2.config.menus.push(menuKey2) editor2.create() TypeScript In the next document, when you refer to the source code to develop DropList, Panel, Tooltip, if you use TypeScript to develop, you may use some built-in types of wangEditor, which can be obtained in this way 【Tip】 wangEditor version >= v4.0.6 。 import { DropListConf, DropListItem, PanelTabConf, PanelConf, TooltipConfItemType } from 'wangeditor' Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/11-custom-menu/02-Button menu.html":{"url":"pages/11-custom-menu/02-Button menu.html","title":"Button Menu","keywords":"","body":"Button Menu Check the previous section, it show the Button Menu Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/11-custom-menu/03-DropList menu.html":{"url":"pages/11-custom-menu/03-DropList menu.html","title":"DropList Menu","keywords":"","body":"DropList Menu DropList menu, when the mouse is over the menu, the drop-down list will be displayed, as shown in the figure below. The class code for developing a DropList menu is as follows. In addition, the registration menu is the same as the process above and will not be repeated. // The class of the title menu can be used as a reference code for the DropList menu class Head extends DropListMenu { constructor(editor) { // DOM element of the title menu in the menu bar // Note that the $ here is not jQuery, but E.$ (the DOM manipulation tool that comes with wangEditor, similar to jQuery) // The data-title attribute indicates a brief description of the function of the button when the mouse hovers over the button const $elem = $('') // droplist conf const dropListConf = { width: 100, title: 'Set Title', type: 'list', list: [ { $elem: $('H1'), value: '' }, { $elem: $('H2'), value: '' }, { $elem: $('H3'), value: '' }, { $elem: $('H4'), value: '' }, { $elem: $('H5'), value: '' }, { $elem: $('Paragraph'), value: '' }, ], // The click event of each item in the droplist clickHandler: (value) => { // The value parameter is the value configured in dropListConf.list this.command(value) }, } super($elem, editor, dropListConf) } command(value) { // set title this.editor.cmd.do('formatBlock', value) } // if the menu need to be activated tryChangeActive() { const reg = /^h/i const cmdValue = this.editor.cmd.queryCommandValue('formatBlock') if (reg.test(cmdValue)) { // The selection is in the title, activate the menu this.active() } else { // Otherwise, unActive this.unActive() } } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/11-custom-menu/04-Panel menu.html":{"url":"pages/11-custom-menu/04-Panel menu.html","title":"Panel Menu","keywords":"","body":"Pancel Menu Panel menu, when you click the menu, the panel will pop up, as shown in the figure below. To develop a Panel menu, you can directly refer to the source code of the video menu, which is easier to understand. Pay attention to the source code: Ignore the type of typescript Ignore MenuActive in index.ts Ignore the getRandom method in create-panel-conf.ts, just define the string yourself In short, check the main process and don’t be affected by unimportant things the registration menu is the same as the process above and will not be repeated. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/11-custom-menu/05-custom tooltip.html":{"url":"pages/11-custom-menu/05-custom tooltip.html","title":"Custom Tooltip","keywords":"","body":"Custom Tooltip In the editing area, you can use tooltip to achieve more complex operations, such as the link in the figure below, you can use tooltip to view and delete links. To customize the tooltip, you can refer to the link tooltip source code. Execute the bindEvent function in index.ts before editor.create(). editor.txt.eventHooks is needed to implement the tooltip, please check the next section. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/11-custom-menu/06-event hooks.html":{"url":"pages/11-custom-menu/06-event hooks.html","title":"Event Hooks","keywords":"","body":"Event Hooks in the Editing Area What it is If you want to monitor various event callbacks in the editing area, such as mouse click, keyup, paste, click image, click link, scroll, etc., you don’t need to write it yourself. The editor is all defined and open to use. // eventHooks { dropEvents: Function[] clickEvents: Function[] keyupEvents: Function[] tabUpEvents: Function[] // tab （keyCode === ）Up tabDownEvents: Function[] // tab （keyCode === 9）Down enterUpEvents: Function[] // enter （keyCode === 13）up deleteUpEvents: Function[] // del（keyCode === 8）up deleteDownEvents: Function[] // del（keyCode === 8）down pasteEvents: Function[] // paste linkClickEvents: Function[] // click textScrollEvents: Function[] // scroll toolbarClickEvents: Function[] // click toolbarl imgClickEvents: Function[] //click image // etc } For all eventHooks and the internal implementations, please refer to code How to Use Using eventHooks is very simple, for example, it is used in the linked tooltip source code. Define a function and push to the corresponding eventHooks. // function showLinkTooltip() { /* show tooltip */ } // function hideLinkTooltip() { /* hide tooltip */ } // click link to show tooltip editor.txt.eventHooks.linkClickEvents.push(showLinkTooltip) // click other place ，like keyupEvents，or scroll，to hide tooltip editor.txt.eventHooks.clickEvents.push(hideLinkTooltip) editor.txt.eventHooks.keyupEvents.push(hideLinkTooltip) editor.txt.eventHooks.toolbarClickEvents.push(hideLinkTooltip) editor.txt.eventHooks.textScrollEvents.push(hideLinkTooltip) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/11-custom-menu/07-more reference.html":{"url":"pages/11-custom-menu/07-more reference.html","title":"More Reference","keywords":"","body":"More Reference Source Code More menu codes examples wangEditor Menu Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/12-I18N/":{"url":"pages/12-I18N/","title":"I18N","keywords":"","body":"I18N By default, wangEditor does not provide the I18n function, because it can make the package too bigger. Load I18next npm i -S i18next Include I18next You need to include i18next in wangEditor when i18next is installed. const E = window.wangEditor const editor = new E('#div1') // include I18next editor.i18next = window.i18next editor.create() Using I18next You can use editor.config.lang to set I18n before editor create. Currently, we only provide two translations:'zh-CN' (Simplified Chinese) and'en' (English). const E = window.wangEditor const editor = new E('#div1') // select language editor.config.lang = 'en' //include i18next editor.i18next = window.i18next editor.create() Custom Language Only Chinese and English are not enough. For this reason, we provide custom language functions. const E = window.wangEditor const editor = new E('#div1') // select language editor.config.lang = 'japan' // 自定义语言 editor.config.languages['japan'] = { wangEditor: { please enter the text: '本文を入力してください', } } //include i18next editor.i18next = window.i18next editor.create() Language Template If you want to customize the language, you need to translate it according to the following template. { wangEditor: { 插入: 'insert', 默认: 'default', 创建: 'create', 修改: 'edit', 如: 'like', 请输入正文: 'please enter the text', menus: { title: { 标题: '标题', 加粗: '加粗', 字号: '字号', 字体: '字体', 斜体: '斜体', 下划线: '下划线', 删除线: '删除线', 缩进: '缩进', 行高: '行高', 文字颜色: '文字颜色', 背景色: '背景色', 链接: '链接', 序列: '序列', 对齐: '对齐', 引用: '引用', 表情: '表情', 图片: '图片', 视频: '视频', 表格: '表格', 代码: '代码', 分割线: '分割线', 恢复: '恢复', 撤销: '撤销', 全屏: '全屏', 代办事项: '代办事项', }, dropListMenu: { 设置标题: 'title', 背景颜色: 'background', 文字颜色: 'font color', 设置字号: 'font size', 设置字体: 'font family', 设置缩进: 'indent', 对齐方式: 'align', 设置行高: 'line heihgt', 序列: 'list', head: { 正文: 'text', }, indent: { 增加缩进: 'indent', 减少缩进: 'outdent', }, justify: { 靠左: 'left', 居中: 'center', 靠右: 'right', }, list: { 无序列表: 'unordered', 有序列表: 'ordered', }, }, panelMenus: { emoticon: { 默认: 'default', 新浪: 'sina', emoji: 'emoji', 手势: 'gesture', }, image: { 图片链接: 'image link', 上传图片: 'upload image', 网络图片: 'network image', }, link: { 链接: 'link', 链接文字: 'link text', 删除链接: 'delete', 查看链接: 'view', }, video: { 插入视频: 'insert video', }, table: { 行: 'row', 列: 'column', 的: ' ', 表格: 'table', 添加行: 'add row', 删除行: 'delete row', 添加列: 'add column', 删除列: 'delete column', 设置表头: 'set header', 取消表头: 'cancel header', 插入表格: 'insert table', 删除表格: 'delete table', }, code: { 删除代码: 'delete code', 修改代码: 'edit code', 插入代码: 'insert code', }, }, }, validate: { 张图片: 'images', 大于: 'greater than', 图片链接: 'image link', 不是图片: 'is not image', 返回结果: 'return results', 上传图片超时: 'upload image timeout', 上传图片错误: 'upload image error', 上传图片失败: 'upload image failed', 插入图片错误: 'insert image error', 一次最多上传: 'once most at upload', 下载链接失败: 'download link failed', 图片验证未通过: 'image validate failed', 服务器返回状态: 'server return status', 上传图片返回结果错误: 'upload image return results error', 请替换为支持的图片类型: 'please replace with a supported image type', 您插入的网络图片无法识别: 'the network picture you inserted is not recognized', 您刚才插入的图片链接未通过编辑器校验: 'the image link you just inserted did not pass the editor verification', }, } } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/13-FQA/":{"url":"pages/13-FQA/","title":"FQA","keywords":"","body":"FAQ Please refer to subdirectory. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/13-FQA/01-Maxlength.html":{"url":"pages/13-FQA/01-Maxlength.html","title":"Maxlength","keywords":"","body":"Maxlength WangEdit cannot implement max-length currently. There is no standard implementation of max-length. max-length is commonly used to limit pure text like and . But rich text editor contains image, code, table etc. It is more complicated than pure text. Those non text will take a plenty of place in editor.txt.html() result. If you really need max-length in the rich text edit, you can get the text by editor.txt.text(), then check the length of text in onchange event handler, and do what you want. But it may have some unexpected problems, you should play to the score. If you have a better idea, welcome issues. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/13-FQA/02-XSS.html":{"url":"pages/13-FQA/02-XSS.html","title":"XSS","keywords":"","body":"XSS Rich text editor is easily attacted by attackers. We recommand use xss. const html = editor.txt.html() const safeHtml = xss(html) console.log('filtered html', safeHtml) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "},"pages/13-FQA/03-Content source code.html":{"url":"pages/13-FQA/03-Content source code.html","title":"Content Source Code","keywords":"","body":"View and Edit Source Code Editor not support 'check source code' and 'edit source code', but you can implement by yourself. We can check and edit content html source code by follow steps: Create a , get the content html by editor.txt.html when click. To implement 'checkout source code', then create a , putting the content html in and hide editor temporary. If you want to format content html, you can use highlight.js plugin. To implement 'edit source code', then create a , putting the content html in and hide editor temporary. If you want to edit content code, you can use monaco editor or codemirror. Note edit source html code may cause XSS. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2021-04-07 02:39:29 "}}