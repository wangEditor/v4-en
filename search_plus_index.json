{"./":{"url":"./","title":"Introduction","keywords":"","body":"wangEditor document English document Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/01-get started/":{"url":"pages/01-get started/","title":"Get Started","keywords":"","body":"Get started Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/01-get started/01-Basic Usage.html":{"url":"pages/01-get started/01-Basic Usage.html","title":"Basic Usage","keywords":"","body":"Basic usage Download NPM npm i wangeditor --save CDN https://unpkg.com/wangeditor/dist/wangEditor.min.js CDN example weblcome use wangEditor richEditor const E = window.wangEditor const editor = new E('#div1') // or const editor = new E( document.getElementById('div1') ) editor.create() Npm example import E from 'wangeditor' const editor = new E('#div1') // or const editor = new E( document.getElementById('div1') ) editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/01-get started/02-edit hight.html":{"url":"pages/01-get started/02-edit hight.html","title":"Edit Hight","keywords":"","body":"Editing area height The default height of editing area is 300px but you can set it by editor.config.height. const editor = new E('#div1') // set editing area height to 500px editor.config.height = 500 // notice，you sholud set height before using create() editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/01-get started/03-split toolbar and Area.html":{"url":"pages/01-get started/03-split toolbar and Area.html","title":"Split Toolbar And Area","keywords":"","body":"Split menus and editing area Toolbar and editing area can be separated(in wangEditor just like Zhihu and so on). If that,Toolbar and editing area can controlle element respectively, that can custom styles. for example: fixed menu、auto add editing area height and so on. .toolbar { border: 1px solid #ccc; } .text { border: 1px solid #ccc; min-height: 400px; } container and toolbar split ------ split line ------ const E = window.wangEditor const editor = new E('#toolbar-container', '#text-container') // transfer two element editor.create() see upper code , menu and editing area is two div, position and size can set as whatever you want. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/01-get started/04-textarea.html":{"url":"pages/01-get started/04-textarea.html","title":"Textarea","keywords":"","body":"Use textarea WangEditor no support textarea ,but you can use onchange come true submit rich text content from textarea webcomle use wangEditor rich text editor const E = window.wangEditor const editor = new E('#div1') const $text1 = $('#text1') editor.config.onchange = function (html) { // step two，observe change, sync update to textarea $text1.val(html) } editor.create() // frist，init textarea value $text1.val(editor.txt.html()) Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/01-get started/05-multiple editor.html":{"url":"pages/01-get started/05-multiple editor.html","title":"Multiple Editor","keywords":"","body":"multiple editor on one web page WangEditor can create multiple editor on one web page .toolbar { background-color: #f1f1f1; border: 1px solid #ccc; } .text { border: 1px solid #ccc; height: 200px; } split section first demo（menus and editing area split） second demo（noraml） const E = window.wangEditor const editor1 = new E('#div1', '#div2') editor1.create() const editor2 = new E('#div3') editor2.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/01-get started/06-Zindex.html":{"url":"pages/01-get started/06-Zindex.html","title":"Zindex","keywords":"","body":"Setting z-index Editor z-index default value is 1000 ,you can set as whatever you want. const editor = new E('#div1') editor.config.zIndex = 500 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/01-get started/07-placeholder.html":{"url":"pages/01-get started/07-placeholder.html","title":"Placeholder","keywords":"","body":"Placeholder You can use editor.config.placeholder change placeholder text. const editor = new E('#div1') editor.config.placeholder = 'custom placeholder txt' // editor.config.placeholder = '' // if you not use placeholder, you can get placehoder a empty string editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/01-get started/08-autoFocus.html":{"url":"pages/01-get started/08-autoFocus.html","title":"AutoFocus","keywords":"","body":"Auto focus The editing area will be focused by default When initializing. you can cancel auto focus access to follow operate. const editor = new E('#div1') // cancel auto focus editor.config.focus = false editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/01-get started/09-customAlert.html":{"url":"pages/01-get started/09-customAlert.html","title":"CustomAlert","keywords":"","body":"Custom alert customAlert can deal global alert, default option is window.alert. If you feel browser in-built alert no good, you can custom alert , that be easy unify alert style. import { message } from 'antd'; const editor = new E('#div1') // take Ant Design as an example editor.config.customAlert = function (s, t) { switch (t) { case 'success': message.success(s) break case 'info': message.info(s) break case 'warning': message.warning(s) break case 'error': message.error(s)cus break default: message.info(s) break } } editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/02-deal content/":{"url":"pages/02-deal content/","title":"Deal Content","keywords":"","body":"yyy Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/02-deal content/01-setContent.html":{"url":"pages/02-deal content/01-setContent.html","title":"SetContent","keywords":"","body":"Set Content If conditions allow, you best to use first way in follow several ways. Use HTML You can set innerHTML content which you want to init in div for creating editor. inital content inital content const E = window.wangEditor const editor = new E('#div1') editor.create() Use JS And you can use editor.txt.html(...) to set editor content after creating editor. const E = window.wangEditor const editor = new E('#div1') editor.create() editor.txt.html('set conetnt by JS API') // set content Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/02-deal content/02-appendContent.html":{"url":"pages/02-deal content/02-appendContent.html","title":"AppendContent","keywords":"","body":"Append Content After creating editor, you can use editor.txt.append('content') to append content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/02-deal content/03-getHTML.html":{"url":"pages/02-deal content/03-getHTML.html","title":"GetHTML","keywords":"","body":"Get HTML Content The editor.txt.html() is used to get HTML content. Note the html which get from editor doesn't contains any style.it means that you can implement changing theme function by yourself.if you want to custom the styles for tags such as , , and so on, The editor styles are provided below for your reference： /* table styles */ table { border-top: 1px solid #ccc; border-left: 1px solid #ccc; } table td, table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; padding: 3px 5px; } table th { border-bottom: 2px solid #ccc; text-align: center; } /* blockquote styles */ blockquote { display: block; border-left: 8px solid #d0e5f2; padding: 5px 10px; margin: 10px 0; line-height: 1.4; font-size: 100%; background-color: #f1f1f1; } /* code styles */ code { display: inline-block; *display: inline; *zoom: 1; background-color: #f1f1f1; border-radius: 3px; padding: 3px 5px; margin: 0 3px; } pre code { display: block; } /* ul ol styles */ ul, ol { margin: 10px 0 10px 20px; } Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/02-deal content/04-getText.html":{"url":"pages/02-deal content/04-getText.html","title":"GetText","keywords":"","body":"Get Text Content The editor.txt.text() is used to get text content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/02-deal content/05-getJSON.html":{"url":"pages/02-deal content/05-getJSON.html","title":"GetJSON","keywords":"","body":"Get Or Set JSON Data Get JSON You can use editor.txt.getJSON() to get JSON content, the format as follows: [ { \"tag\": \"p\", \"attrs\": [], \"children\": [ \"welcome to use \", { \"tag\": \"b\", \"attrs\": [], \"children\": [ \"wangEditor\" ] }, \"rich text editor\" ] }, { \"tag\": \"p\", \"attrs\": [], \"children\": [ { \"tag\": \"img\", \"attrs\": [ { \"name\": \"src\", \"value\": \"xxx.png\" }, { \"name\": \"style\", \"value\": \"max-width:100%;\" } ] } ] } ] Set JSON You can also use editor.txt.setJSON(json) API to set JSON content, the json param format must be consistent with mentioned above. Note setJSON API is supported started with v4.3.0. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/02-deal content/06-clear.html":{"url":"pages/02-deal content/06-clear.html","title":"Clear","keywords":"","body":"Clear Content The editor.txt.clear() is used to clear editor content. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/02-deal content/07-history.html":{"url":"pages/02-deal content/07-history.html","title":"History","keywords":"","body":"History Setting There are two ways to set History mode: standard mode(for modern browsers) and compatible mode (for IE and old Edge).You can set history mode by editor.config.compatibleMode. And about the max size of History, you can set it by editor.config.historyMaxSize. The following shows how to use them. The editor.config.onchangeTimeout can be used to set the delay time of History records (when users are not active after x millisecond) on compatible mode. const E = window.wangEditor const editor = new E(\"#div1\") // by default，IE and old Edge use compatible mode，if you want to set the mode for other browsers, you can set a function. editor.config.compatibleMode = function () { // return true for compatible mode, otherwise return false for standard mode. return true } // when we use compatible mode, we can set recording time by onchangeTimeout，the default value is 200 ms. editor.config.onchangeTimeout = 500 // change to 500 ms // you aslo can set max size for history, the default value is 30. editor.config.historyMaxSize = 50 // change to 50 editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/03-menu/":{"url":"pages/03-menu/","title":"Menu","keywords":"","body":"Menu Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/03-menu/01-setMenus.html":{"url":"pages/03-menu/01-setMenus.html","title":"SetMenus","keywords":"","body":"Set Menus You should set menus before creating editor. editor.config.menus The option is defined for menus which are visible and menus order. For example: welcome to use wangEditor editor const E = window.wangEditor const editor = new E('#div1') // set menus, change order editor.config.menus = [ 'bold', 'head', 'link', 'italic', 'underline' ] editor.create() editor.config.excludeMenus The option is defined for menus are excluded. For example: welcome to use wangEditor editor const E = window.wangEditor const editor = new E('#div1') // set exclude menus editor.config.excludeMenus = [ 'emoticon', 'video' ] editor.create() Note in order to avoid conflict, don't both set menus and excludeMenus. All Menus By default, editor show all menus, there are as follows: editor.config.menus = [ 'head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'indent', 'lineHeight', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'video', 'table', 'code', 'splitLine', 'undo', 'redo', 'todo', ] Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/03-menu/02-setColors.html":{"url":"pages/03-menu/02-setColors.html","title":"SetColors","keywords":"","body":"Set Colors You can set font color and background color to use editor.config.colors: const E = window.wangEditor const editor = new E('#div1') // set color and background color editor.config.colors = [ '#000000', '#eeece0', '#1c487f', '#4d80bf' ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/03-menu/03-setFontFamily.html":{"url":"pages/03-menu/03-setFontFamily.html","title":"SetFontFamily","keywords":"","body":"Set Font Size You can set font family to use editor.config.fontNames: const E = window.wangEditor const editor = new E('#div1') editor.config.fontNames = [ 'Arial' 'Tahoma', 'Verdana', 'Times New Roman', 'Courier New', ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/03-menu/04-setFontSize.html":{"url":"pages/03-menu/04-setFontSize.html","title":"SetFontSize","keywords":"","body":"Set Font Size You can set font size to use editor.config.fontSizes: const E = window.wangEditor const editor = new E('#div1') editor.config.fontSizes = { 'x-small': { name: '10px', value: '1' }, 'small': { name: '13px', value: '2' }, 'normal': { name: '16px', value: '3' }, 'large': { name: '18px', value: '4' }, 'x-large': { name: '24px', value: '5' }, 'xx-large': { name: '32px', value: '6' }, 'xxx-large': { name: '48px', value: '7' }, } editor.create() Note especially in above example: key value that x-small, small, normal can't change, the key value only can decrease. value is '1 - 7' can't change too, it only can decrease. And the key must be correspond with value.Such as, small is correspond with 2. So in above example, you can change name. It will not work immediately after the modification, and some adjustments need to be made. Taking 'large': { name: '18px', value: '4' } as an example, when you set the font size value, it should generate .... So you need to add extra styles, it make size=\"4\" to be correspond with font-size: 18px;. font[size=\"4\"] { font-size: 18px; } The css mentioned above the page shows editor content too. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/03-menu/05-setLineHeight.html":{"url":"pages/03-menu/05-setLineHeight.html","title":"SetLineHeight","keywords":"","body":"Set Line Height You can set line height to use editor.config.lineHeights: const E = window.wangEditor const editor = new E('#div1') editor.config.lineHeights = ['1', '1.15', '1.6', '2', '2.5', '3'] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/03-menu/06-setEmotions.html":{"url":"pages/03-menu/06-setEmotions.html","title":"SetEmotions","keywords":"","body":"Set Emotions You can set emotions by using editor.config.emotions. They support multiple tabs in panel. const SINA_URL_PATH = 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal' const E = window.wangEditor const editor = new E('#div1') editor.config.emotions = [ { title: 'sina', // tab’s title type: 'image', // 'emoji' or 'image' content: [ { alt: '[Bad Smile]', src: `${SINA_URL_PATH}/50/pcmoren_huaixiao_org.png` }, { alt: '[Lick Screen]', src: `${SINA_URL_PATH}/40/pcmoren_tian_org.png` }, { alt: '[corrupt]', src: `${SINA_URL_PATH}/3c/pcmoren_wu_org.png` }, ] }, { title: 'emoji', // tab’s title type: 'emoji', // 'emoji' / 'image' // emoji，content must be an array content: '&#x1F600; &#x1F603; &#x1F604; &#x1F601; &#x1F606; &#x1F605; &#x1F602; &#x1F60A; &#x1F607; &#x1F642; &#x1F643; &#x1F609; &#x1F613; &#x1F62A; &#x1F634; &#x1F644; &#x1F914; &#x1F62C; &#x1F910;'.split(/\\s/), } ] editor.create() Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/03-menu/07-hightlightCode.html":{"url":"pages/03-menu/07-hightlightCode.html","title":"HightlightCode","keywords":"","body":"Highlight Code The code menu of wangEditor support to import highlight js plugin to implement highlight code function.And it provides a variety of styles. The highlight isn't built-in function, so you need to install plugin manually. highlight.js website: highlight. Install Highlight NPM npm install highlight.js -S CDN Mount Highlight 1. import highlight.js import hljs from 'highlight.js' If you use CDN, highlight.js declare hljs variable under window object, you can use it directly. 2. import css By NPM: import 'highlight.js/styles/monokai_sublime.css' By CDN: If you finished all steps above, it will have highlight styles when you use code menu to insert code.The result as follows: Show Content You need to import highlight.js style when you read content from server to show in page. The way that install highlight.js the same as introduction above. If you want to learn more about highlight.js, you can reference offical website. Insert Code Options 1.languageType The languageType option is select box options when you insert code. We set many commonly used programming languages. If you want to set more, you can custom it by languageType: editor.config.languageType = [ 'Bash', 'C', 'C#', 'C++', 'CSS', 'Java', 'JavaScript', 'JSON', 'TypeScript', 'Plain text', 'Html', 'XML', 'SQL', 'Go', 'Kotlin', 'Lua', 'Markdown', 'PHP', 'Python', 'Shell Session', 'Ruby', ] 2.languageTab You can edit code in grey area after inserting code. We made tab key behavior to be consistent for eliminating different behavior between browsers. You can use languageTab option to set \"typing the characters\" of tab key. The default value is four full-horn spaces. editor.config.languageTab = ' ' The languageTab option decide to tab behavior within pre area. Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "},"pages/03-menu/08-setFullScreen.html":{"url":"pages/03-menu/08-setFullScreen.html","title":"SetFullScreen","keywords":"","body":"Set Full Screen Set Option You can use editor.config.showFullScreen to set full screen before creating editor, the default value is true. Note it is not supported when toolbar and editable area are separated. (toolbar and editable area are separated) welcome to use wangEditor editor const E = window.wangEditor const editor = new E('#div1') // cancel full screen editor.config.showFullScreen = false editor.create() API And we provide API for users(When toolbar and editable area are separated, APIs doesn't work too). editor.fullScreen() // set full screen editor.unFullScreen() // cancel full screen Copyright © wangEditor (2020 - present) all right reserved，powered by GitbookFile Modify: 2020-12-30 02:56:27 "}}